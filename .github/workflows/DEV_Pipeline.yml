name: GitHub Actions Demo
run-name: ${{ github.actor }} is deploying to SIT üöÄ
on:
  pull_request:
    types: [closed]
    branches:
      - dev
    paths:
      - "force-app/**"
jobs:
  deploy:
    name: Deploy
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: SIT
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
      - run: echo "üçè This job's status is ${{ job.status }}."
      # Checkout the Source code from the latest commit
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install NPM
        run: |
          npm install

      # Install the SFDX CLI using npm command
      - name: Install the SFDX CLI
        run: |
          npm install @salesforce/cli --global
          sf --help

      # Decrypt the server.key.enc file
      - name: Decrypt the server.key.enc file & store inside assets folder
        run: |
          openssl enc -nosalt -aes-256-cbc -d -in ${{ secrets.ENCRYPTION_KEY_FILE }} -out ${{ secrets.JWT_KEY_FILE }} -base64 -K ${{ secrets.DECRYPTION_KEY }} -iv ${{ secrets.DECRYPTION_IV }}

      # Authenticate Salesforce Org
      - name: Authenticate Salesforce Org
        run: |
          sf org login jwt --username ${{ secrets.HUB_USER_NAME }} --jwt-key-file ${{ secrets.JWT_KEY_FILE }} --client-id ${{ secrets.HUB_CONSUMER_KEY }} --alias Dev-org --set-default --instance-url ${{ secrets.HUB_LOGIN_URL }}

      # Install Dependencies
      - name: Install Dependencies
        run: |
          npm install

      - name: Installing the SF CLI Scanner
        id: install-sf-scanner
        run: |
          echo 'y' | sf plugins install @salesforce/sfdx-scanner@latest

      # run the security scan in all the files and store the result at reports/scan-reports.html location
      - name: Run SF CLI Scanner
        id: run-sf-scanner
        run: |
          mkdir reports
          sf scanner run -f html -t "force-app" -e "eslint,retire-js,pmd,cpd" -c "Design,Best Practices,Code Style,Performance,Security" --outfile reports/scan-reports.html

      # Run Apex PMD Scan
      - name: "Run PMD scan"
        uses: pmd/pmd-github-action@v1
        id: pmd
        with:
          sourcePath: "force-app"
          rulesets: "ruleset.xml"
          analyzeModifiedFilesOnly: false

      # Check for PMD violations
      - name: "Check for PMD violations"
        # if: ${{steps.pmd.outputs.violations != 0 }}
        run: |
          # exit 1
          echo "PMD Violatons ${{steps.pmd.outputs.violations}} "
          echo "PMD outputs ${{toJSON(steps.pmd.outputs)}} "
          echo "test"

      - name: Install Python dependencies
        id: python-install
        run: |
          sudo apt-get update
          sudo apt-get install python3
          python3 -m pip install --upgrade pip
          sudo apt install python-is-python3 python3-git

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get changed files
        id: get-changed-files
        run: |
          python3 script2.py ${{ github.workspace }} ${{ github.head_ref }} ${{ github.base_ref }}

      # Deploy Delta components to Salesforce
      - name: Deploy Delta components to Salesforce
        run: |
          sf project deploy start --test-level NoTestRun --source-dir ${{ github.workspace }}/DeltaPackage --target-org Dev-org
